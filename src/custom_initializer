from tensorflow.keras.initializers import RandomNormal
from tensorflow import dtypes


class ELMNormalWeights(RandomNormal):
    """
    Initializer that generates tensors with a normal distribution.

    Attention: not tested.

    Arguments:
      mean: a python scalar or a scalar tensor. Mean of the random values
        to generate.
      stddev: a python scalar or a scalar tensor. Standard deviation of the
        random values to generate.
      seed: A Python integer. Used to create random seeds. See
        `tf.compat.v1.set_random_seed`
        for behavior.
    """

    def __init__(self, fan_it, mean=0.0, seed=None):
      stddev = 3.0 / fan_it ** 0.5
      super().__init__(mean=mean, stddev=stddev, seed=seed)


class StructuresGlorotWeights(RandomNormal):
    """
    Initializer that generates tensors with a normal distribution.

    Attention: not tested.

    Arguments:
      mean: a python scalar or a scalar tensor. Mean of the random values
        to generate.
      stddev: a python scalar or a scalar tensor. Standard deviation of the
        random values to generate.
      seed: A Python integer. Used to create random seeds. See
        `tf.compat.v1.set_random_seed`
        for behavior.
    """

    def __init__(self, fan_it, fan_out, mean=0.0, seed=None):
        stddev = 2 / (fan_it + fan_out) ** 0.5
        super().__init__(mean=mean, stddev=stddev, seed=seed)
